"""
Utilitaires g√©n√©raux pour Summora
Gestion des ressources NLTK, validation des fichiers, etc.
"""
import nltk
from pathlib import Path
from typing import Set, Optional
import logging

# Configuration du logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Formats audio support√©s par Whisper
SUPPORTED_AUDIO_FORMATS: Set[str] = {
    ".mp3", ".mp4", ".mpeg", ".mpga", ".m4a", ".wav", ".webm"
}

def setup_nltk_resources() -> bool:
    """
    Configure les ressources linguistiques NLTK n√©cessaires.

    Returns:
        bool: True si le setup s'est bien pass√©, False sinon
    """
    print("\nüîÑ Configuration des ressources linguistiques...")

    resources = {
        'punkt': 'tokenizer pr√©-entra√Æn√© pour segmentation des phrases',
        'stopwords': 'mots vides en fran√ßais (le, la, de, etc.)'
    }

    success = True
    for resource, description in resources.items():
        try:
            nltk.download(resource, quiet=True)
            logger.info(f"‚úÖ {resource} t√©l√©charg√©: {description}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur t√©l√©chargement {resource}: {e}")
            success = False

    if success:
        print("‚úÖ Ressources NLTK t√©l√©charg√©es avec succ√®s")
    else:
        print("‚ö†Ô∏è Certaines ressources NLTK ont √©chou√© - continuons quand m√™me")

    return success

def is_audio_file(filename: str | Path) -> bool:
    """
    V√©rifie si un fichier a un format audio support√©.

    Args:
        filename: Chemin vers le fichier √† v√©rifier

    Returns:
        bool: True si le format est support√©, False sinon
    """
    return Path(filename).suffix.lower() in SUPPORTED_AUDIO_FORMATS

def validate_audio_path(file_path: str | Path) -> Optional[Path]:
    """
    Valide et normalise un chemin de fichier audio.

    Args:
        file_path: Chemin vers le fichier audio

    Returns:
        Path: Chemin valid√© ou None si invalide
    """
    path = Path(file_path)

    if not path.exists():
        logger.error(f"‚ùå Fichier introuvable: {path}")
        return None

    if not is_audio_file(path):
        logger.error(f"‚ùå Format non support√©: {path.suffix}")
        logger.info(f"üí° Formats support√©s: {SUPPORTED_AUDIO_FORMATS}")
        return None

    logger.info(f"‚úÖ Fichier audio valid√©: {path.name}")
    return path

def get_supported_formats() -> Set[str]:
    """
    Retourne la liste des formats audio support√©s.

    Returns:
        Set[str]: Ensemble des extensions support√©es
    """
    return SUPPORTED_AUDIO_FORMATS.copy()
