"""
Utilitaires g√©n√©raux pour SMA : Summora Meeting Analyzer
Configuration NLTK, validation des fichiers audio et constantes
"""
import nltk
from pathlib import Path
from typing import Set, Optional
import logging

# Configuration du logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Formats audio support√©s par Whisper
SUPPORTED_AUDIO_FORMATS: Set[str] = {
    ".mp3", ".mp4", ".mpeg", ".mpga", ".m4a", ".wav", ".webm"
}

# Ajout de mots vides courants non inclus dans NLTK
# Liste de +400 mots : https://countwordsfree.com/stopwords/french
# Liste sp√©cifique pour le meeting, enrichissement fr√©quent

MEETING_STOPWORDS_ADDITIONAL = [
    # Pronoms / Verbes fr√©quents / Grammaire
    "√™tre", "avoir", "faire", "aller", "venir", "voir", "savoir", "pouvoir", "vouloir",
    "falloir", "devoir", "dire", "prendre", "mettre", "donner", "tr√®s", "tout", "tous", "toutes",

    # Connecteurs de r√©union
    "alors", "donc", "du coup", "ensuite", "apr√®s", "puis", "en fait",
    "enfin", "voil√†", "bref", "par contre", "quand m√™me", "de toute fa√ßon",

    # Fillers sp√©cifiques r√©unions
    "heu", "euh", "bah", "ben", "hein", "quoi", "genre", "ouais", "ouai",
    "nan", "d'accord", "ok", "okay", "parfait", "exact", "putain", "de ouf", "fr√©ro", "grave",

    # Expressions meetings
    "on va", "il faut", "je pense", "je crois", "on peut", "√ßa va",
    "c'est bon", "ok alors", "du coup on", "donc on", "alors on", "bon alors",
    "en vrai", "gros", "c'est relou", "c'est chiant", "tu vois", "je sais pas",
    "je veux dire", "c‚Äôest clair", "tu sais", "en gros", "en mode", "√ßa veut dire",
    "tu m‚Äôentends", "si tu veux", "je dirais", "√ßa marche", "j‚Äôsais pas", "c‚Äôest genre",
    "du style", "genre de truc", "truc de ouf", "c‚Äôest chaud", "tu vois ce que je veux dire",
    "tu comprends", "j‚Äôveux dire", "tu me suis", "vois-tu", "c'est abus√©",

    # Politesse & social
    "merci", "s'il vous pla√Æt", "s'il te pla√Æt", "excusez-moi", "pardon", "d√©sol√©",
    "bonjour", "bonsoir", "au revoir", "√† bient√¥t", "bonne journ√©e", "sorry", "thanks", "ciao", "bye"
]

def setup_nltk_ressource() -> bool:
    """
    Configure les ressources linguistique NLTK n√©cessaires.

    Retourne:
        bool : True si le setup s'est bien d√©roul√©
    """
    logger.info("üîÑ Configuration des ressources linguistiques...")

    ressources = {
        'punkt': 'tokenizer pour segmentation des phrases'
        ,'stopwords': 'mots vides fran√ßais'
    }

    success = True
    for ressource, description in ressources.items():
        try:
            nltk.download(ressource, quiet=True)
            logger.info(f"‚úÖ {ressource} t√©l√©charg√©: {description}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur t√©l√©chargement {ressource}: {e}")
            success = False

    if success:
        logger.info("‚úÖ Ressources NLTK configur√©es avec succ√®s")
    else:
        logger.warning("‚ö†Ô∏è Certaines ressources NLTK ont √©chou√© - continuons quand m√™me")

    return success

def get_meeting_stopwords() -> Set[str]:
    """
    Retourne l'ensemble complet des stopwords fran√ßais sp√©cifique au meeting.

    Retourne:
        Set[str]: Stopwords fran√ßais NLTK + extensions sp√©cifiques au meeting
    """
    try:
        from nltk.corpus import stopwords
        french_stopwords = set(stopwords.words('french'))
    except Exception as e:
        logger.warning(f"Erreur chargement stopwords NLTK: {e}")
        french_stopwords = set()

    # Ajout de la liste des stopwords sp√©cifique au meeting
    french_stopwords.update(MEETING_STOPWORDS_ADDITIONAL)
    logger.info(f"üìã {len(french_stopwords)} stopwords fran√ßais (meeting-optimized)")

    return french_stopwords

"""
Validation des fichiers audio
"""

def is_audio_file(filename: str | Path) -> bool:
    """
    V√©rifie si un fichier a un format audio support√© par Whisper

    Args:
        filename: Chemin vers le fichier √† v√©rifier

    Retourne:
        bool: True si le format est support√©.
    """
    return Path(filename).suffix.lower() in SUPPORTED_AUDIO_FORMATS

def validate_audio_path(file_path: str | Path) -> Optional[Path]:
    """
    Valide et normalise un chemin de fichier audio.

    Args:
        file_path: Chemin vers le fichier audio

    Retourne:
        Path: Chemin valid√© ou None si invalide
    """
    path = Path(file_path)

    if not path.exists():
        logger.error(f"‚ùå Fichier introuvable: {path}")
        return None

    if not is_audio_file(path):
        logger.error(f"‚ùå Format non support√©: {path.suffix}")
        logger.info(f"üí° Formats support√©s: {SUPPORTED_AUDIO_FORMATS}")
        return None

    logger.info(f"‚úÖ Fichier audio valid√©: {path.name}")
    return path

def get_supported_formats() -> Set[str]:
    """
    Retourne la liste des formats audio support√©s.

    Retourne:
        Set[str]: Ensemble des extensions support√©es
    """
    return SUPPORTED_AUDIO_FORMATS.copy()

def get_supported_formats() -> Set[str]:
    """
    Retourne la liste des formats audio support√©s.

    Retourne:
        Set[str]: Ensemble des extensions support√©es
    """
    return SUPPORTED_AUDIO_FORMATS.copy()

"""
Nettoyage sp√©cifique pour la transcription
"""

def format_duration(seconds: float) -> str:
    """
    Formate une dur√©e en secondes vers un format lisible.

    Args:
        seconds: Dur√©e en secondes

    Retourne:
        str: Dur√©e format√©e (ex: "2m 30s", "1h 15m")
    """
    if seconds < 60:
        return f"{int(seconds)}s"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        secs = int(seconds % 60)
        return f"{minutes}m {secs}s" if secs > 0 else f"{minutes}m"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        return f"{hours}h {minutes}m" if minutes > 0 else f"{hours}h"

def clean_text_for_meeting(text: str) -> str:
    """
    Nettoie un texte sp√©cifiquement pour l'analyse de meeting.

    Args:
        text: Texte brut √† nettoyer

    Retourne:
        str: Texte nettoy√© optimis√© pour meetings
    """
    import re

    # Suppression des espaces multiples
    text = re.sub(r'\s+', ' ', text)

    # Garde seulement la ponctuation utile pour meetings
    text = re.sub(r'[^\w\s\'\-\.,;:!?\(\)]', '', text)

    # Suppression des r√©p√©titions communes en oral
    text = re.sub(r'\b(\w+)\s+\1\b', r'\1', text)  # "le le" -> "le"

    return text.strip()
